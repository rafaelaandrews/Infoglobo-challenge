{"version":3,"sources":["http-common.js","services/NoticiaService.js","components/AddNoticia.js","components/Noticia.js","components/NoticiasList.js","App.js","serviceWorker.js","index.js"],"names":["axios","create","baseURL","headers","http","get","id","data","post","put","delete","title","AddNoticia","initialNoticiaState","titulo","conteudo","dataPublicacao","useState","noticia","setNoticia","submitted","setSubmitted","handleInputChange","event","target","name","value","className","onClick","htmlFor","type","required","onChange","NoticiaDataService","then","response","catch","e","console","log","Noticia","props","currentNoticia","setCurrentNoticia","message","setMessage","useEffect","match","params","_id","history","push","NoticiasList","noticias","setNoticias","currentIndex","setCurrentIndex","searchTitle","setSearchTitle","retrieveNoticias","placeholder","map","index","setActiveNoticia","key","to","App","href","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.6a6bcbb8.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport default axios.create({\n  baseURL: \"http://localhost:3000/noticia\",\n  headers: {\n    \"Content-type\": \"application/json\"\n  }\n});\n","import http from \"../http-common\";\n\nconst getAll = () => {\n  return http.get(\"/\");\n};\n\nconst get = id => {\n  return http.get(`/${id}`);\n};\n\nconst create = data => {\n  return http.post(\"/create\", data);\n};\n\nconst update = (id, data) => {\n  return http.put(`/update/${id}`, data);\n};\n\nconst remove = id => {\n  return http.delete(`/delete/${id}`);\n};\n\nconst findByTitle = title => {\n  return http.get(`/titulo/${title}`);\n};\n\nexport default {\n  getAll,\n  get,\n  create,\n  update,\n  remove,\n  findByTitle\n};\n","import React, { useState } from \"react\";\nimport NoticiaDataService from \"../services/NoticiaService\";\n\nconst AddNoticia = () => {\n  const initialNoticiaState = {\n    id: null,\n    titulo: \"\",\n    conteudo: \"\",\n    dataPublicacao: \"\"\n  };\n  const [noticia, setNoticia] = useState(initialNoticiaState);\n  const [submitted, setSubmitted] = useState(false);\n\n  const handleInputChange = event => {\n    const { name, value } = event.target;\n    setNoticia({ ...noticia, [name]: value });\n  };\n\n  const saveNoticia = () => {\n    var data = {\n      titulo: noticia.titulo,\n      conteudo: noticia.conteudo,\n      dataPublicacao: noticia.dataPublicacao\n    };\n\n    NoticiaDataService.create(data)\n      .then(response => {\n        setNoticia({\n          id: response.data.id,\n          titulo: response.data.titulo,\n          conteudo: response.data.conteudo,\n          dataPublicacao: response.data.dataPublicacao\n        });\n        setSubmitted(true);\n      })\n      .catch(e => {\n        console.log(e);\n      });\n  };\n\n  const newNoticia = () => {\n    setNoticia(initialNoticiaState);\n    setSubmitted(false);\n  };\n\n  return (\n    <div className=\"submit-form\">\n      {submitted ? (\n        <div>\n          <h4>Notícia cadastrada com sucesso.</h4>\n          <button className=\"btn btn-success\" onClick={newNoticia}>\n            Adicionar outra Notícia\n          </button>\n        </div>\n      ) : (\n        <div>\n          <div className=\"form-group\">\n            <label htmlFor=\"titulo\">Título</label>\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              id=\"titulo\"\n              required\n              value={noticia.titulo}\n              onChange={handleInputChange}\n              name=\"titulo\"\n            />\n          </div>\n\n          <div className=\"form-group\">\n            <label htmlFor=\"conteudo\">Conteúdo</label>\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              id=\"conteudo\"\n              required\n              value={noticia.conteudo}\n              onChange={handleInputChange}\n              name=\"conteudo\"\n            />\n          </div>\n\n          <div className=\"form-group\">\n            <label htmlFor=\"dataPublicacao\">Data de publicação</label>\n            <input\n              type=\"date\"\n              className=\"form-control\"\n              id=\"dataPublicacao\"\n              required\n              value={noticia.dataPublicacao}\n              onChange={handleInputChange}\n              name=\"dataPublicacao\"\n            />\n          </div>\n\n          <button onClick={saveNoticia} className=\"btn btn-success\">\n            Salvar\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AddNoticia;\n","import React, { useState, useEffect } from \"react\";\nimport NoticiaDataService from \"../services/NoticiaService\";\n\nconst Noticia = props => {\n  const initialNoticiaState = {\n    id: null,\n    titulo: \"\",\n    conteudo: \"\",\n    dataPublicacao: \"\"\n  };\n  const [currentNoticia, setCurrentNoticia] = useState(initialNoticiaState);\n  const [message, setMessage] = useState(\"\");\n\n  const getNoticia = id => {\n    NoticiaDataService.get(id)\n      .then(response => {\n        setCurrentNoticia(response.data);\n        console.log(response.data);\n      })\n      .catch(e => {\n        console.log(e);\n      });\n  };\n\n  useEffect(() => {\n    getNoticia(props.match.params.id);\n  }, [props.match.params.id]);\n\n  const handleInputChange = event => {\n    const { name, value } = event.target;\n    setCurrentNoticia({ ...currentNoticia, [name]: value });\n  };\n\n  const updateNoticia = () => {\n    NoticiaDataService.update(currentNoticia._id, currentNoticia)\n      .then(response => {\n        setMessage(\"Notícia atualizada com sucesso!\");\n      })\n      .catch(e => {\n        console.log(e);\n      });\n  };\n\n  const deleteNoticia = () => {\n    NoticiaDataService.remove(currentNoticia._id)\n      .then(response => {\n        props.history.push(\"/noticias\");\n      })\n      .catch(e => {\n        console.log(e);\n      });\n  };\n\n  return (\n    <div>\n      {currentNoticia ? (\n        <div className=\"edit-form\">\n          <h4>Noticia</h4>\n          <form>\n            <div className=\"form-group\">\n              <label htmlFor=\"titulo\">Título</label>\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"titulo\"\n                name=\"titulo\"\n                value={currentNoticia.titulo}\n                onChange={handleInputChange}\n              />\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"conteudo\">Conteúdo</label>\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"conteudo\"\n                name=\"conteudo\"\n                value={currentNoticia.conteudo}\n                onChange={handleInputChange}\n              />\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"conteudo\">Data de publicação</label>\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"dataPublicacao\"\n                name=\"dataPublicacao\"\n                value={currentNoticia.dataPublicacao}\n                onChange={handleInputChange}\n              />\n            </div>\n          </form>\n\n          <button className=\"badge badge-danger mr-2\" onClick={deleteNoticia}>\n            Deletar\n          </button>\n\n          <button\n            type=\"submit\"\n            className=\"badge badge-success\"\n            onClick={updateNoticia}\n          >\n            Atualizar\n          </button>\n          <p>{message}</p>\n        </div>\n      ) : (\n        <div>\n          <br />\n          <p>Clique em alguma Notícia para visualizar os detalhes</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Noticia;\n","import React, { useState, useEffect } from \"react\";\nimport NoticiaDataService from \"../services/NoticiaService\";\nimport { Link } from \"react-router-dom\";\n\nconst NoticiasList = () => {\n  const [noticias, setNoticias] = useState([]);\n  const [currentNoticia, setCurrentNoticia] = useState(null);\n  const [currentIndex, setCurrentIndex] = useState(-1);\n  const [searchTitle, setSearchTitle] = useState(\"\");\n\n  useEffect(() => {\n    retrieveNoticias();\n  }, []);\n\n  const onChangeSearchTitle = e => {\n    const searchTitle = e.target.value;\n    setSearchTitle(searchTitle);\n  };\n\n  const retrieveNoticias = () => {\n    NoticiaDataService.getAll()\n      .then(response => {\n        setNoticias(response.data);\n      })\n      .catch(e => {\n        console.log(e);\n      });\n  };\n\n  const setActiveNoticia = (noticia, index) => {\n    setCurrentNoticia(noticia);\n    setCurrentIndex(index);\n  };\n\n  const findByTitle = () => {\n    NoticiaDataService.findByTitle(searchTitle)\n      .then(response => {\n        setNoticias(response.data);\n      })\n      .catch(e => {\n        console.log(e);\n      });\n  };\n\n  return (\n    <div className=\"list row\">\n      <div className=\"col-md-8\">\n        <div className=\"input-group mb-3\">\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"Buscar um título\"\n            value={searchTitle}\n            onChange={onChangeSearchTitle}\n          />\n          <div className=\"input-group-append\">\n            <button\n              className=\"btn btn-outline-secondary\"\n              type=\"button\"\n              onClick={findByTitle}\n            >\n              Buscar\n            </button>\n          </div>\n        </div>\n      </div>\n      <div className=\"col-md-6\">\n        <h4>Notícias</h4>\n\n        <ul className=\"list-group\">\n          {noticias &&\n            noticias.map((noticia, index) => (\n              <li\n                className={\n                  \"list-group-item \" + (index === currentIndex ? \"active\" : \"\")\n                }\n                onClick={() => setActiveNoticia(noticia, index)}\n                key={index}\n              >\n                {noticia.titulo}\n              </li>\n            ))}\n        </ul>\n      </div>\n      <div className=\"col-md-6\">\n        {currentNoticia ? (\n          <div>\n            <h4>Noticia</h4>\n            <div>\n              <label>\n                <strong>Título:</strong>\n              </label>{\" \"}\n              {currentNoticia.titulo}\n            </div>\n            <div>\n              <label>\n                <strong>Conteúdo:</strong>\n              </label>{\" \"}\n              {currentNoticia.conteudo}\n            </div>\n            <div>\n              <label>\n                <strong>Data de publicação:</strong>\n              </label>{\" \"}\n              {currentNoticia.dataPublicacao}\n            </div>\n            <Link\n              to={\"/noticia/\" + currentNoticia._id}\n              className=\"badge badge-warning\"\n            >\n              Editar\n            </Link>\n          </div>\n        ) : (\n          <div>\n            <br />\n            <p>Cadastre uma Notícia</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default NoticiasList;\n","import React from \"react\";\nimport { Switch, Route, Link } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nimport AddNoticia from \"./components/AddNoticia\";\nimport Noticia from \"./components/Noticia\";\nimport NoticiasList from \"./components/NoticiasList\";\n\nfunction App() {\n  return (\n    <div>\n      <nav className=\"navbar navbar-expand navbar-dark bg-dark\">\n        <a href=\"/noticias\" className=\"navbar-brand\">\n          Infoglobo\n        </a>\n        <div className=\"navbar-nav mr-auto\">\n          <li className=\"nav-item\">\n            <Link to={\"/noticias\"} className=\"nav-link\">\n              Notícias\n            </Link>\n          </li>\n          <li className=\"nav-item\">\n            <Link to={\"/add\"} className=\"nav-link\">\n              Adicionar\n            </Link>\n          </li>\n        </div>\n      </nav>\n\n      <div className=\"container mt-3\">\n        <Switch>\n          <Route exact path={[\"/\", \"/noticias\"]} component={NoticiasList} />\n          <Route exact path=\"/add\" component={AddNoticia} />\n          <Route path=\"/noticia/:id\" component={Noticia} />\n        </Switch>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}